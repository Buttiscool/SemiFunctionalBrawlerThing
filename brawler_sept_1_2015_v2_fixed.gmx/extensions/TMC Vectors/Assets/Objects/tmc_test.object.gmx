<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>line = tmc_segment(tmc_vect2(200,100),tmc_vect2(200,200));
var point1 = tmc_segment_p1(line);
var point2 = tmc_segment_p2(line);
show_debug_message(string(point1[1]))
show_debug_message(string(point1[2]))
show_debug_message(string(point2[1]))
show_debug_message(string(point2[2]))

mouse_point1 = tmc_vect2(x,y);
mouse_point2 = tmc_vect2(x,y);

last_scalar = tmc_segment(tmc_vect2(0,0),tmc_vect2(0,0))

test = tmc_vect2(100,0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(!keyboard_check(vk_space)) exit;

var p1 = tmc_segment_p1(line);
var p2 = tmc_segment_p2(line);
//show_message("1:"+string(p1))
//show_message("2:"+string(p1))
draw_line(p1[1],p1[2],p2[1],p2[2]);

//show_message("3:")
if(mouse_check_button(mb_left))
{
    mouse_point1 = tmc_vect2(mouse_x,mouse_y);
}
mouse_point2 = tmc_vect2(mouse_x,mouse_y);
//show_message("4:")

var clockw = tmc_vect_is_clockwise(p1,p2,mouse_point2)
//show_message("5:")
draw_text(400,400,string(clockw));
//show_message("6:")

var mouse_line = tmc_segment(mouse_point1,mouse_point2)
//show_message("7:")
draw_line(mouse_point1[1],mouse_point1[2],mouse_point2[1],mouse_point2[2]);
//show_message("8:")
scalar = tmc_segment_scalar_to_segment(line,mouse_line);
//show_message("9:")
//show_message("9:"+string(line))
//show_message("9:"+string(mouse_line))
d = tmc_segment_distance_to_segment(line,mouse_line);
//show_message("10:")
//d = tmc_vect_len(scalar);
dir = tmc_vect_dir2d(scalar);
//show_message("11:")
s = "dis: " + string(d);
s += "#dir: " + string(dir);
//show_message("12:")
draw_text(20,20,string(s))
//show_message("13:")

var short_line = tmc_segment_line_to_segment(line,mouse_line);
//show_message("14:")
var p1 = tmc_segment_p1(short_line);
//show_message("15:")

var p2 = tmc_segment_p2(short_line);
//show_message("16:")

draw_line_color(p1[1],p1[2],p2[1],p2[2],c_red,c_lime);
//show_message("17:")
if(floor(d) == 0)
{
//show_message("18:")
    var incidence = tmc_segment_scalar(mouse_line);
//show_message("19:")
    var normal = tmc_vect_rot2d(
                    tmc_vect_norm(
                        tmc_vect_scalar( 
                                        tmc_segment_p1(line),
                                        tmc_segment_p2(line))),
                    90 * -clockw);
//show_message("20:")

    draw_line(600,600,600+normal[1]*20,600+normal[2]*20)
//show_message("21:")
    var reflect = tmc_vect_reflect(incidence,normal);
//show_message("22:")

    var reflect_line = tmc_segment(p1,tmc_vect_add(p1,reflect));
//show_message("23:")

    var p1 = tmc_segment_p1(reflect_line);
//show_message("24:")

    var p2 = tmc_segment_p2(reflect_line);
//show_message("25:")

    draw_line_color(p1[1],p1[2],p2[1],p2[2],c_blue,c_yellow);
//show_message("26:")
    
    
}
else
{
//show_message("27:")
    last_scalar = tmc_segment_scalar(short_line);
}

//show_message("28:")

var scalar = tmc_segment_scalar_to_point(line,mouse_point2);
//show_message("29:")

tmc_vect_len(scalar);
//show_message("30:")

dir = tmc_vect_dir2d(scalar);
//show_message("31:")
s = "dis: " + string(d);
s += "#dir: " + string(dir);
draw_text(300,20,string(s))
tmc_segment_free(short_line);
//show_message("32:")
var short_line = tmc_segment_line_to_point(line,mouse_point2);
//show_message("33:")
var p1 = tmc_segment_p1(short_line);
//show_message("34:")
var p2 = tmc_segment_p2(short_line);
//show_message("35:")
draw_line_color(p1[1],p1[2],p2[1],p2[2],c_red,c_lime);
//show_message("36:")
draw_line(500,500,500+test[1],500+test[2]);
//show_message("37:")
test = tmc_vect_rot2d(test,5)
//show_message("38:")
tmc_segment_free(short_line);
//show_message("39:")
tmc_segment_free(mouse_line);
//show_message("40:")
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
