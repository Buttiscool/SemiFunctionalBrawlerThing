<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>tmc_player_stand_anim</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//see tmc_pill_character_collision() for description of these member variables
tmc_restitution = 0;
tmc_floor_incline = 55;
tmc_ceiling_incline = 55;
tmc_right_wall_incline =0;
tmc_left_wall_incline =0;
//see tmc_pill_character_collision() for description of these member variables
tmc_is_floor = 0;
tmc_floor_a = 0;
tmc_is_ceiling = 0;
tmc_ceiling_a = 0; 
tmc_is_right_wall = 0;
tmc_right_wall_a = 0;
tmc_is_left_wall = 0;
tmc_left_wall_a = 0;
tmc_sensor_is_floor = 0;;
tmc_sensor_floor_a = 0;
tmc_sensor_is_ceiling  = 0;
tmc_sensor_ceiling_a = 0;
tmc_sensor_is_right_wall = 0;
tmc_sensor_right_wall_a = 0;
tmc_sensor_is_left_wall = 0;
tmc_sensor_left_wall_a = 0;

//create pill, this setup assumes centered origins
//but having centered origins is not required
//radius from bounding box
pill_collision_radius = (bbox_right-bbox_left)/2;
pill_sensor_radius = pill_collision_radius+32;
//height from bounding box
pill_half_height = (bbox_bottom-bbox_top)/2-pill_collision_radius;
//the pill size and position relative to the x,y origins
pill = tmc_pill_create(0,-pill_half_height,0,+pill_half_height,pill_collision_radius,pill_sensor_radius);

m_hspeed_desired = 0;
m_hspeed_max = 8;
m_hspeed_accel = .2;

m_animation_ended = 0;
m_jumping = 0;

gravity_direction = 270;
gravity = .5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tmc_pill_character_collision(pill,global.tmc_geo_shapes);
vspeed = min(15,vspeed);
m_hspeed_desired=(keyboard_check(vk_right)-keyboard_check(vk_left))*m_hspeed_max;
hspeed+=(m_hspeed_desired-hspeed) * m_hspeed_accel;
hspeed=median(-m_hspeed_max,hspeed,m_hspeed_max)
if(tmc_is_floor)
{
    if(hspeed!=0) direction = tmc_sensor_floor_a +185*(hspeed&lt;0) - 5*(hspeed&gt;0)    
}
//vspeed+=(keyboard_check(vk_up)) * -15 * (tmc_is_floor!=0) 
var pressed_jumping = (keyboard_check(vk_up)) * (tmc_is_floor!=0) 
x=median(1,x,room_width-1);
y=median(1,y,room_height-1);

if(sign(round(m_hspeed_desired))!=0) image_xscale = sign(m_hspeed_desired);
if(tmc_sensor_is_floor)
{
    var abs_hs = abs(hspeed)
    if(sprite_index = tmc_player_jump_down_anim)
    {
        sprite_index = tmc_player_jump_end_anim;
        image_speed = 1;
        m_animation_ended = 0;
    }
    else if(sprite_index = tmc_player_jump_end_anim and m_animation_ended = 0) x=x; //nothing
    else if(pressed_jumping or m_jumping)
    {
        if(!m_jumping)
        {
            sprite_index = tmc_player_jump_start_anim;
            image_index = 0;
            image_speed = 1;
            m_jumping = 1;
            m_animation_ended = 0;
        }
        else
        {
            if(m_animation_ended)
            {
                m_jumping = 0;
                vspeed+=-15;
                sprite_index = tmc_player_jump_up_anim;
                image_index = 0;
                image_speed = 1;
            }
        }
        
    }
    else if(abs_hs &gt;=m_hspeed_max-1) 
    {
        sprite_index = tmc_player_run_anim;
        image_speed = 1;
    }
    else if(abs_hs&gt;1) 
    {
        sprite_index = tmc_player_walk_anim;
        image_speed = abs_hs/2;
    }
    else if(abs_hs == 0) 
    {
        sprite_index = tmc_player_stand_anim;
        image_speed = 1;
    }
}
else
{
    if(vspeed&lt;-2) 
    {
        sprite_index = tmc_player_jump_up_anim;
        image_speed = 1;
    }
    if(vspeed&gt;-2)
    {
        if(sprite_index == tmc_player_jump_up_anim)
        {
            sprite_index = tmc_player_jump_transit_anim;
            image_index = 0;
            image_speed = 1;
            m_animation_ended = 0;
        }
        else if(sprite_index == tmc_player_jump_transit_anim)
        {
            if(m_animation_ended)
            {
                sprite_index = tmc_player_jump_down_anim
                image_speed = 1;
            }
        }
        
        else
        {
            sprite_index = tmc_player_jump_down_anim
            image_speed = 1;
        }
        
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>m_animation_ended = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Draw
draw_self();
//exit;

tmc_pill_debug_draw(pill,x,y);
tmc_pill_debug_draw_bbox(pill,x,y);

s = "tmc_sensor_is_floor: " + string(tmc_sensor_is_floor);
s+="#tmc_sensor_floor_a: " + string(tmc_sensor_floor_a);
s+="#tmc_sensor_is_ceiling: " + string(tmc_sensor_is_ceiling);
s+="#tmc_sensor_ceiling_a: " + string(tmc_sensor_ceiling_a);
s+="#tmc_sensor_is_right_wall: " + string(tmc_sensor_is_right_wall);
s+="#tmc_sensor_right_wall_a: " + string(tmc_sensor_right_wall_a);
s+="#tmc_sensor_is_left_wall: " + string(tmc_sensor_is_left_wall);
s+="#tmc_sensor_left_wall_a: " + string(tmc_sensor_left_wall_a);
s+="#direction: " + string(direction);
draw_text(x,y,s);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
