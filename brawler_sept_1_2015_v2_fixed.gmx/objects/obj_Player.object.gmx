<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_DynaPplCol</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_overlay(1)
event_inherited();
m_Inventory = tmc_inv_create();
m_BackPack = tmc_inv_add_chest(m_Inventory,"BACKPACK");
//show_message(string(m_BackPack));

m_Radius = 16;
m_Mass = 1000000;
///Initial Variables
jumpHeight = 10; // Height the player can jump
walkXSpeed = 6; // Horizontal walk speed
walkYSpeed = 3; // Vertical walk speed
runSpeed = 8; // Horizontal run speed
hp = 100; // Health Points
STATE = 0; // The state the player is currently in
yMinDist = 736; // Minimum distance the player can go upwards
yMaxDist = 992; // Max distance the player can go downwards
xMinDist = abs(sprite_width / 4); // Minimum distance the player can left. abs returns the absolute value(a positive number)
xMaxDist = abs(room_width - sprite_width / 4); // Max distance the player can go right. abs returns the absolute value(a positive number)
image_speed = .5; // Set the initial idle animation speed
shadow = instance_create(x,y,obj_PlayerShadow); // Creates the shadow under player

//Initialize Gamepad
gamepad_set_axis_deadzone(0, 0.5);       // Set the "deadzone" for the axis
gamepad_set_button_threshold(0, 0.1);    // Set the "threshold" for the triggers

// PLAYER STATES //
/*
// 0: Standing Right
// 1: Standing Left
// 2: Walking Up
// 3: Walking Right
// 4: Walking Down
// 5: Walking Left
// 6: Punch
// 7: Combo Punch
// 8: Jumping
// 9: Kick
// 10: Combo Kick
// 11: Jumping Right
// 12: Jumping Left
// 13: Jump Kick
// 14: Jump Kick Move Right
// 15: Jump Kick Move Left
// 16: Hurt
// 17: Death
// 18: Throw
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart(); // restart room
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if players hp is greater than 0
if(hp &lt;= 0) // Check health points
{
    switch(STATE) // Switch players state
    {
        case 16: // Hurt
        image_index = 0; // Set image index to 0
        sprite_index = spr_PlayerDeath; // Change players animation to Hurt
        image_speed = .8; // Set players animation speed
        STATE = 17; // Set players state to Dead
        alarm[1] = 60; // Set alarm to restart game
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DoCollision();
DoPplCollision();

depth = -y; // Sets depth of character based on y pos in level
shadow.x = x; // Keeps shadows x pos with players x pos
shadow.y = y; // Keeps shadows y pos with players y pos


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Emerald Speed Boost +5 Speed
//if(!gamepad_button_check_pressed(0, gp_face4)) exit;
if(!keyboard_check_pressed(ord("E"))) exit;
var r = tmc_inv_find_item(m_Inventory, "Emerald");
            if (r!=0)
            {
                show_message("Speed boost activated!")
                add_oneSpeed();
                    tmc_inv_del_item(m_Inventory,r);
            }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Code


///Sets Variables to call
keyUp = keyboard_check(vk_up) || (gamepad_axis_value(0, gp_axislv) &lt; 0);// Up key and up with the left analog stick
keyDown = keyboard_check(vk_down) || (gamepad_axis_value(0, gp_axislv) &gt; 0);  // Down key and down with the left analog stick
keyLeft = keyboard_check(vk_left) || (gamepad_axis_value(0, gp_axislh) &lt; 0); // Left key and left with the left analog stick
keyRight = keyboard_check(vk_right) || (gamepad_axis_value(0, gp_axislh) &gt; 0); // Right key and right with the left analog stick


if(keyUp) // Up key is pressed
{
    if(y &gt; yMinDist) // If our players y pos is low enough to move upwards
    {
        switch(STATE)
        {
            case 0: // Standing Right
            STATE = 2; // Change player state to walking upwards
            sprite_index = spr_PlayerWalk; // Change player animation to walking
            image_speed = 1; // Set player animation speed
            break;
            
            case 1: // Standing Left
            STATE = 2; // Change player state to walking upwards
            sprite_index = spr_PlayerWalk; // Change player animation to walking
            image_speed = 1; // Set player animation speed
            break;
            
            case 2: // Walking Upwards
            y -= walkYSpeed; // Move players y pos upwards 
            break;
            
            case 3: // Walking Right
            y -= walkYSpeed; // Move players y pos upwards
            break;
            
            case 5: // Walking Downwards
            y -= walkYSpeed; // Move players y pos upwards
            break;
        }
    }
}

if(keyDown) // Down key is pressed
{
    if(y &lt; yMaxDist) // If our players y pos is high enough to move downwards
    {
        switch(STATE)
        {
            case 0: // Standing Right
            STATE = 4; // Change players state to walking downwards
            sprite_index = spr_PlayerWalk; // Change players animation to walking
            image_speed = 1; // Set players animation speed
            break;
            
            case 1: // Standing Left
            STATE = 4; // Change players state to walking downwards
            sprite_index = spr_PlayerWalk; // Change players animation to walking
            image_speed = 1; // Set players animation speed
            break;
            
            case 3: // Walking Right
            y += walkYSpeed; // Move players y pos downwards
            break;
            
            case 4: // Walking downwards
            y += walkYSpeed; // Move players y pos downwards
            break;
            
            case 5: // Walking left
            y += walkYSpeed; // Move players y pos downwards
            break;
        }
    }
}

if(keyLeft) // Left key is pressed
{
    if(x &gt; xMinDist) // If our players x pos is greater than the room width
    {
        switch(STATE)
        {
            case 0: // Standing right
            sprite_index = spr_PlayerWalk; // Change players animation to walking
            image_speed = 1; // Set players animation speed
            image_xscale = -1; // Set players x scale to facing left
            STATE = 5; // Change players state to walking left
            break;
            
            case 1: // Standing left
            sprite_index = spr_PlayerWalk; // Change players animation to walking
            image_speed = 1; // Set players animation speed
            image_xscale = -1; // Set players x scale to facing left
            STATE = 5; // Change players state to walking left
            break;
            
            case 2: // Walking upwards
            image_xscale = -1; // Set players x scale to facing left
            x -= walkXSpeed; // Move players x pos left
            break;
            
            case 4: // Walking downwards
            image_xscale = -1; // Set players x scale to facing left
            x -= walkXSpeed; // Move players x pos left
            break;
            
            case 5: // Walking left
            x -= walkXSpeed; // Move players x pos left
            break;
        }
    }
}

if(keyRight) // Right key is pressed
{
    if(x &lt; xMaxDist) // If our players x pos is less than then the room width
    {
        switch(STATE)
        {
            case 0: // Standing Right
            sprite_index = spr_PlayerWalk; // Change players animation to walking
            image_speed = 1; // Set players animation speed
            image_xscale = 1; // Set players x scale to facing right
            STATE = 3; // Change players state to walking right
            break;
            
            case 1: // Standing Left
            sprite_index = spr_PlayerWalk; // Change players animation to walking
            image_speed = 1; // Set players animation speed
            image_xscale = 1; // Set players x scale to facing right
            STATE = 3; // Change players state to walking right
            break;
            
            case 2: // Walking upwards
            image_xscale = 1; // Set players x scale to facing right
            x += walkXSpeed; // Move players x pos right
            break;
            
            case 3: // Walking Right
            x += walkXSpeed; // Move players x pos right
            break;
            
            case 4: // Walking downwards
            image_xscale = 1; // Set players x scale facing right
            x += walkXSpeed; // Move players x pos right
            break;
        }
    }
}

if(!keyUp) // Up key is released
{
    switch(STATE)
    {
        case 2: // Walking upwards
        sprite_index = spr_PlayerStand; // Change players animation to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
        break;
    }
}

if(!keyDown) // Down key is released
{
    switch(STATE)
    {
        case 4: // Walking downwards
        sprite_index = spr_PlayerStand; // Change players animation to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
        break;
    }
}

if(!keyLeft) // Left key is released
{
    switch(STATE)
    {
        case 5: // Walking left
        sprite_index = spr_PlayerStand; // Change players animation to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
        break;
    }
}

if(!keyRight) // Right key is released
{
    switch(STATE)
    {
        case 3: // Walking right
        sprite_index = spr_PlayerStand; // Change players animation to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
        break;
    }
}

if(canMoveOn == true &amp;&amp; x &gt;= xMaxDist) // If all enemies are dead and player is on the right side of the screen
{
    if(room == rm_01) room_goto(rm_02); // If current level is 1, Go to level 2
    if(room == rm_02) room_goto(rm_03); // If current level is 2, Go to level 3
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK CODE
//Sets Gamepad variables
gamepadPunch = gamepad_button_check_pressed(0, gp_shoulderrb);
gamepadKick = gamepad_button_check_pressed(0, gp_shoulderlb);
gamepadJump = gamepad_button_check_pressed(0, gp_face1);

//PUNCHING
if(gamepadPunch)
{
  switch(STATE) // Change the players state accordingly
  {
    case 0: // Standing right
    
    case 1: // Standing left
    
    case 2: // Walking upwards
    
    case 3: // Walking right
    
    case 4: // Walking downwards
    
    case 5: // Walking left
    image_index = 0; // Set the image index to 0 so the punch begins at the first frame
    sprite_index = spr_PlayerPunch; // Change players animation to punch
    image_speed = .8; // Set players speed
    STATE = 6; // Change players state to Punching
    break;
    
    case 6: // The punching state
    if(image_index &lt;= 5) // If players image index is low enough to trigger combo attack
    {
        tempNum = image_index; // Used to set the Combo Punch at the same frame as the Punch
        image_index = tempNum; // Used to set the Combo Punch at the same frame as the Punch
        sprite_index = spr_PlayerComboPunch; // Change the players animation to Combo Punch
        image_speed = .6; // Set the players animation speed
        STATE = 7; // Change players state to combo punch
    }
    break;
  }
}


//KICKING
if (gamepadKick)
{  
    switch(STATE)
    {
    case 0: // Standing Right
    
    case 1: // Standing Left
    
    case 2: // Walking Upwards
    
    case 3: // Walking Right
    
    case 4: // Walking Downwards
    
    case 5: // Walking Left
    image_index = 0; // Makes sure the animation plays from the beggining
    sprite_index = spr_PlayerKick; // Set player animation to Kick
    image_speed = .6; // Set players animation speed
    STATE = 9; // Change players state to Kick
    break;
    
    case 8: // Jumping
    if(image_index &lt;= 7) // Player is still on his way upwards
    {
        sprite_index = spr_PlayerJumpKick; // Set player animation to Jump Kick
        image_speed = .8; // Set players animation speed
        STATE = 13; // Change players state to Jump Kick
    }
    break;
    
    case 9: // Kicking
    tempIndex = image_index;
    image_index = tempIndex;
    sprite_index = spr_PlayerComboKick; // Set players animation to Combo Kick
    image_speed = .6; // Set players animation speed
    STATE = 10; // Change players state to Combo Kick
    break;
    
    case 11: // Jumping Right
    if(image_index &lt;= 7) // Player is still on his way upwards
    {
        sprite_index = spr_PlayerJumpKick; // Set player animation to Jump Kick
        image_speed = .8; // Set players animation speed
        STATE = 14; // Change players state to Jump Kick Right
    }
    break;
    
    case 12: // Jumping Left
    if(image_index &lt;= 7) // Player is still on his way upwards
    {
        sprite_index = spr_PlayerJumpKick; // Set player animation to Jump Kick
        image_speed = .8; // Set players animation speed
        STATE = 15; // Change players state to Jump Kick Left
    }
    break;
    }
}

//JUMPING
if(gamepadJump)
{
    switch(STATE)
{
    case 0: // Standing Right
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 1: // Standing Left
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 2: // Walking Upwards
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 3: // Walking Right
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump Right
    image_speed = .8; // Set players animation speed
    STATE = 11; // Set players state to Jump Right
    break;
    
    case 4: // Walking Downwards
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 5: // Walking Left
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump Left
    image_speed = .8; // Set players animation speed
    STATE = 12; // Set players state to Jump Left
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation finish
switch(STATE)
{
    case 6: // Punching
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 7: // Combo Punching
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 8: // Jumping
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 9: // Kicking
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 10: // Combo Kicking
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 11: // Jumping Right
    x += walkXSpeed; // Makes player move to the right accordingly
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 12: // Jumping Left
    x -= walkXSpeed; // Makes player move to the left accordingly
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 13: // Jump Kick
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 14:
    x += walkXSpeed; // Makes player move to the right accordingly
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 15:
    x -= walkXSpeed; // Makes player move to the left accordingly
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 16: // Hurt
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 17: // Death
    {
        if(image_index &gt;= image_number - 1) // When animation is finished
        {
            image_speed = 0; // Set players animation speed
        }
    }
    break;
    
    case 18: // Jumping Down
    y -= walkXSpeed; // Makes player move down accordingly
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
    
    case 19: // Jumping Up
    y += walkXSpeed; // Makes player move up accordingly
    if(image_index &gt;= image_number - 1) // When animation is finished
    {
        sprite_index = spr_PlayerStand; // Change players animation back to standing
        image_speed = .5; // Set players animation speed
        STATE = 0; // Set players state to standing
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat Donut +20 HP
if(!gamepad_button_check_pressed(0, gp_face3)) exit;
var r = tmc_inv_find_item(m_Inventory, "Donut");
            if (r!=0)
            {
                add_twenty_hp();
                    tmc_inv_del_item(m_Inventory,r);
            }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Pickup_Par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(point_distance(x,y,other.x,other.y) &lt; 60)
{
    var item = other.id;
    tmc_inv_add_item(m_Inventory,"BACKPACK",item.m_Name,item.m_Data);
    with(item)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Enemy
if(obj_Enemy.withinAttackDist) // If player is within attacking distance
{
    if(STATE &lt; 6) // If player is walking or standing
    {
        if(other.eSTATE == 3) // If enemy is attacking
        {
            switch(STATE) // Change the players state
            {
                case 0:
                
                case 1:
                
                case 2:
                
                case 3:
                
                case 4:
                
                case 5: // If the player is standing or walking
                if(other.eDir == 0) image_xscale = -1; // Flip players x pos
                else
                if(other.eDir == 1) image_xscale = 1; // Flip players x pos
                image_index = 0; // Set index to player from begining
                sprite_index = spr_PlayerHurt; // Set players animation to Hurt
                image_speed = .8; // Set players animation speed
                hp -= 10; // Take away hit points from player
                alarm[0] = 5; // Set alarm to check if players life is greater than 0
                STATE = 16; // Set players state to Hurt
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump Key
switch(STATE)
{
    case 0: // Standing Right
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 1: // Standing Left
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 2: // Walking Upwards
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 3: // Walking Right
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump Right
    image_speed = .8; // Set players animation speed
    STATE = 11; // Set players state to Jump Right
    break;
    
    case 4: // Walking Downwards
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump
    image_speed = .8; // Set players animation speed
    STATE = 8; // Set players state to Jump
    break;
    
    case 5: // Walking Left
    image_index = 0; // Reset animation index
    sprite_index = spr_PlayerJump; // Set players animation to Jump Left
    image_speed = .8; // Set players animation speed
    STATE = 12; // Set players state to Jump Left
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Punch Key
switch(STATE) // Change the players state accordingly
{
    case 0: // Standing right
    
    case 1: // Standing left
    
    case 2: // Walking upwards
    
    case 3: // Walking right
    
    case 4: // Walking downwards
    
    case 5: // Walking left
    image_index = 0; // Set the image index to 0 so the punch begins at the first frame
    sprite_index = spr_PlayerPunch; // Change players animation to punch
    image_speed = .8; // Set players speed
    STATE = 6; // Change players state to Punching
    break;
    
    case 6: // The punching state
    if(image_index &lt;= 5) // If players image index is low enough to trigger combo attack
    {
        tempNum = image_index; // Used to set the Combo Punch at the same frame as the Punch
        image_index = tempNum; // Used to set the Combo Punch at the same frame as the Punch
        sprite_index = spr_PlayerComboPunch; // Change the players animation to Combo Punch
        image_speed = .6; // Set the players animation speed
        STATE = 7; // Change players state to combo punch
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kick Key
switch(STATE)
{
    case 0: // Standing Right
    
    case 1: // Standing Left
    
    case 2: // Walking Upwards
    
    case 3: // Walking Right
    
    case 4: // Walking Downwards
    
    case 5: // Walking Left
    image_index = 0; // Makes sure the animation plays from the beggining
    sprite_index = spr_PlayerKick; // Set player animation to Kick
    image_speed = .6; // Set players animation speed
    STATE = 9; // Change players state to Kick
    break;
    
    case 8: // Jumping
    if(image_index &lt;= 7) // Player is still on his way upwards
    {
        sprite_index = spr_PlayerJumpKick; // Set player animation to Jump Kick
        image_speed = .8; // Set players animation speed
        STATE = 13; // Change players state to Jump Kick
    }
    break;
    
    case 9: // Kicking
    tempIndex = image_index;
    image_index = tempIndex;
    sprite_index = spr_PlayerComboKick; // Set players animation to Combo Kick
    image_speed = .6; // Set players animation speed
    STATE = 10; // Change players state to Combo Kick
    break;
    
    case 11: // Jumping Right
    if(image_index &lt;= 7) // Player is still on his way upwards
    {
        sprite_index = spr_PlayerJumpKick; // Set player animation to Jump Kick
        image_speed = .8; // Set players animation speed
        STATE = 14; // Change players state to Jump Kick Right
    }
    break;
    
    case 12: // Jumping Left
    if(image_index &lt;= 7) // Player is still on his way upwards
    {
        sprite_index = spr_PlayerJumpKick; // Set player animation to Jump Kick
        image_speed = .8; // Set players animation speed
        STATE = 15; // Change players state to Jump Kick Left
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,210</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
