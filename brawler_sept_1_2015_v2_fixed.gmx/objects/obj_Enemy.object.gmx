<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_EnemyStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_DynaPplCol</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initial Variables
event_inherited();
m_Radius = 16;

ranNum = 0;
hp = 100; // Enemy health points
eSTATE = 0; // Enemy state
moveSpeed = 1; // Speed enemy can move by
canAttack = 1; // Allows enemy to attack
eDir = 0; // Direction enemy is facing
withinAttackDist = 0; // If the player is close enough to player to attack
fade = 0; // Used to fade out and destroy enemy when dead
movementTimer = 60; // Triggers timer for movement
attackTimer = 15; // Triggers timer for attack

image_speed = .5; // Initial animation speed
randomize(); // Ensures random number
image_blend = random(123456789); // Set enemy to random color
shadow = instance_create(x,y,obj_PlayerShadow); // Creates a shadow under enemy

alarm[0] = movementTimer; // Movement alarm
alarm[1] = attackTimer; // Attack alarm

/* Enemy states

0: Stand
1: Walk right
2: Walk left
3: Attack
4: Hurt
5: Death

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if hp is greater than 0
if(hp &lt;= 0) // If health is all gone
{
    hp = 0; // Not neccessary, but sets health points to 0
    image_index = 0; // Resets image index to 0
    sprite_index = spr_EnemyDeath; // Set enemy animation to Death
    image_speed = .8; // Set enemy animation speed
    eSTATE = 5; // Set enemy state to Death
    if(enemyCount &lt; totalEnemies) // If enemyCount is less than desired enemies
    {
        instance_create(random(room_width),y,obj_Enemy); // Create a new enemy at random pos
        enemyCount += 1; // Add to enemyCount
    }
    else
    if(enemyCount == totalEnemies) // If all enemies are dead
    {
        instance_create(1000, 200, obj_GO); // Create the GO obj to let player know its time to move
        canMoveOn = true; // Allows player to proceed
    }
    fade = 1; // Fade enemy alpha and destroy him
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random Attack
if(eSTATE == 0 || eSTATE == 1 || eSTATE == 2) // If enemy is not attacking already
{
    if(withinAttackDist) // If enemy is close enough to player to attack
    {
       image_index = 0; // Reset animation index to 0
       sprite_index = spr_EnemyPunch; // Set enemy animation to Attack
       image_speed = .8; // Set enemy animation speed
       eSTATE = 3; // Set enemy state to Attack
    }
}

alarm[1] = attackTimer; // Reset attackTimer to do it again
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random Movement Code
if(eSTATE &lt; 3) // If enemy state is stand/walk
{
    eSTATE = round(random(2)); // Randomly make enemy stand or walk
}
alarm[0] = movementTimer; // Reset alarm to do it all again
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DoCollision();
DoPplCollision();

depth = -y; // Sets depth of character based on y pos in level

shadow.x = x; // Keeps the shadow x pos with own x pos
shadow.y = y; // Keeps the shadow y pos with own y pos

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///Movement Code

// This code checks wether or not the player is within attacking range
if(obj_Player.x &lt; x + abs(sprite_width / 2) &amp;&amp; obj_Player.x &gt; x - abs(sprite_width / 2) &amp;&amp; obj_Player.y &lt; y + 10 &amp;&amp; obj_Player.y &gt; y - 10) withinAttackDist = 1;
else // If not
withinAttackDist = 0; // Enemy cannot attack

if(hp &gt; 0) // If the enemy has health stills
{
    if(obj_Player.x &lt; x - 50) eDir = 1; // Sets enemy direction facing left
    else
    if(obj_Player.x &gt; x + 50) eDir = 0; // Sets enemy direction facing right
    if(eDir == 1) image_xscale = -1; // Sets x scale accordingly
    else
    if(eDir == 0) image_xscale = 1; // Sets x scale accordingly
}

if(eSTATE == 0) // Standing
{
    sprite_index = spr_EnemyStand; // Set enemy animation to Stand
    image_speed = .5; // Set enemy animation speed
}

if(eSTATE == 1) // Walking
{
    sprite_index = spr_EnemyWalk; // Set enemy animation to Walk
    image_speed = 1; // Set enemy animation speed
    if(eDir == 0) x += moveSpeed; // Makes enemy move Right accordingly
    else
    if(eDir == 1) eSTATE = 2; // Set enemy state to Walk(other direction)
    if(obj_Player.y &gt; y + 10) y += moveSpeed / 2; // Walking down towards player
    else
    if(obj_Player.y &lt; y - 10) y -= moveSpeed / 2; // Walking up towards player
}

if(eSTATE == 2) // Walking
{
    sprite_index = spr_EnemyWalk; // Set enemy animation to Walk
    image_speed = 1; // Set enemy animation speed
    if(eDir == 0) eSTATE = 1; // Set enemy state to Walk(other direction)
    else
    if(eDir == 1) x -= moveSpeed; // Makes enemy move left accordingly
    if(obj_Player.y &gt; y + 10) y += moveSpeed / 2; // Walking down towards player
    else
    if(obj_Player.y &lt; y - 10) y -= moveSpeed / 2; // Walking up towards player
}

if(eSTATE == 3) // Attack
{
    if(image_index &gt;= image_number - 1) // If animation is finished
    {
        sprite_index = spr_EnemyStand; // Set enemy animation to Stand
        image_speed = .5; // Set enemy animation speed
        eSTATE = 0; // Set enemy state to Stand
    }
}

if(eSTATE == 4) // Hurt
{
    if(image_index &gt;= image_number - 1) // If animation is finished
    {
        sprite_index = spr_EnemyStand; // Set enemy animation to Stand
        image_speed = .5; // Set enemy animation speed
        eSTATE = 0; // Set enemy state to Stand
    }
}

if(eSTATE == 5) // Death
{
    if(image_index &gt;= image_number - 1) // If death animation is finished
    {
        image_speed = 0; // Set enemy animation to 0 so it stops the animation
    }
}

if(fade == 1) // If enemy is dead
{
    image_alpha -= .05; // Gradually decrease enemy alpha
    if(image_alpha &lt;= 0) // If enemy alpha is fully decreased
    {
        instance_destroy(); // Destroy enemy
        with(shadow) instance_destroy(); // Destroy enemy shadow
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with the Player
if(withinAttackDist) // Players punch
{
    if(eSTATE &lt; 3)
    {
        if(obj_Player.STATE == 6) // Player punching
        {
            hp -= 15; // Take away hit points
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
        else
        if(obj_Player.STATE == 7) // Player Combo Punching
        {
            hp -= 20; // Take away hit points
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
        else
        if(obj_Player.STATE == 9) // Player Kicking
        {
            hp -= 15; // Take away hit points
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
        else
        if(obj_Player.STATE == 10) // Player Combo Kicking
        {
            hp -= 20; // Take away hit points
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
        else
        if(obj_Player.STATE == 13) // Jump Kick
        {
            hp -= 15; // Take away hit points
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
        else
        if(obj_Player.STATE == 14) // Jump Kicking Right
        {
            hp -= 20; // Take away hit points
            x += 50;
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
        else
        if(obj_Player.STATE == 15) // Jump Kicking Left
        {
            hp -= 20; // Take away hit points
            x -= 50;
            alarm[2] = 5; // Alarm checks if enemy is dead
            image_index = 0; // Set image index to 0
            sprite_index = spr_EnemyHurt; // Set players animation to hurt
            image_speed = .8; // Set players animation speed
            eSTATE = 4; // Set players state to Hurt
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>128,210</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
